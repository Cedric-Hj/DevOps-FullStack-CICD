pipeline {
    agent any

    environment {
        MAVEN_HOME = '/opt/apache-maven-3.9.7'
        PATH = "${MAVEN_HOME}/bin:${env.PATH}"
        SONARQUBE_URL = 'https://sonarcloud.io'
        SONARCLOUD_TOKEN = credentials('sonarcloud token')
        dockerImageTag = "latest"  // You should change this to a valid tag name
        dockerRepo = "cedrichj/devops_cicd"
        dockerHubCredentials = 'DockerCredencials' // ID of your Jenkins credentials
        dockerContainerName = "devops_cicd"
        APP_VERSION = ""
        
                    
        
    }

    stages {

        stage('Cleanup') {
            steps {
                deleteDir()
            }
        }

        stage('Checkout and Read Parameters') {
            steps {
                script {
                    // Checkout the repository
                    git branch: 'main', url: 'https://github.com/Cedric-Hj/DevOps-CICD-WebApp.git'
                    
                    // List files to check if parameters.yaml is present
                    sh 'ls -la'
                    
                    // Output the content of parameters.yaml for debugging
                    sh 'cat parameters.yaml'
                    
                    // Read the parameters.yaml file
                    ${APP_VERSION}  = readYaml(file: 'parameters.yaml')
                    
                    // Output the parsed YAML content for debugging
                    echo "Parsed parameters.yaml content: ${APP_VERSION}"

                   
                }
            }
        }


        stage('Build and Test') {
            parallel {
                stage('Build') {
                    steps {
                        echo "----------- Build started ----------"
                        sh 'mvn clean deploy -Dmaven.test.skip=true'
                        echo "----------- Build completed ----------"
                    }
                }
                stage('Unit Test') {
                    steps {
                        echo "----------- Unit test started ----------"
                        sh 'mvn surefire-report:report'
                        echo "----------- Unit test completed ----------"
                    }
                }
            }
        }

        stage('SonarQube Analysis') {
            environment {
                scannerHome = tool 'sonar-scanner'
            }
            steps {
                echo '<--------------- SonarQube Analysis started  --------------->'
                withSonarQubeEnv('sonar-server') {
                    sh "${scannerHome}/bin/sonar-scanner"
                }
                echo '<--------------- SonarQube Analysis completed  --------------->'
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    def qg = waitForQualityGate()
                    if (qg.status != 'OK') {
                        error "Pipeline aborted due to Quality Gate failure: ${qg.status}"
                        emailext (
                            to: 'devops.cedric.hj@gmail.com',
                            subject: "Build ${env.JOB_NAME} - ${env.BUILD_NUMBER} Quality Gate Failed",
                            body: """
                            The build ${env.JOB_NAME} - ${env.BUILD_NUMBER} has failed the Quality Gate in SonarCloud.

                            Quality Gate Status: ${status}
                            Reason: ${description}

                            Please check the SonarCloud report for more details: ${SONARCLOUD_URL}/dashboard?id=${env.JOB_NAME}
                            """
                        )
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker image with tag: ${dockerRepo}:${env.APP_VERSION}"
                    docker.build("${dockerRepo}:${env.APP_VERSION}")
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('', 'DockerCredencials') {
                        sh "docker push ${dockerRepo}:${env.APP_VERSION}" 
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    // Replace placeholders in Kubernetes manifests
                    sh """
                    sed -i 's/{{APP_VERSION}}/${env.APP_VERSION}/g' /opt/kubernetes/deployment.yaml
                    sed -i 's/{{APP_VERSION}}/${env.APP_VERSION}/g' /opt/kubernetes/service.yaml
                    sed -i 's/{{APP_VERSION}}/${env.APP_VERSION}/g' /opt/kubernetes/namespace.yaml
                    """

                    // Apply the Kubernetes manifests
                    sh "kubectl apply -f /opt/kubernetes/"
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully'
        }
        failure {
            echo 'Pipeline failed'
        }
    }
}
