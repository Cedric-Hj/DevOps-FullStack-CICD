pipeline {
    agent any

    environment {
        MAVEN_HOME = '/opt/apache-maven-3.9.7'
        PATH = "${MAVEN_HOME}/bin:${env.PATH}"
        SONARQUBE_URL = 'https://sonarcloud.io'
        SONARCLOUD_TOKEN = credentials('sonarcloud token')
        dockerImageTag = "latest"  // You should change this to a valid tag name
        dockerRepo = "cedrichj/devops_cicd"
        dockerHubCredentials = 'DockerCredencials' // ID of your Jenkins credentials
        dockerContainerName = "devops_cicd"
        appVersion = "v2.4"
        dockerFullContainerName = "${dockerRepo}:${appVersion}"
        /*KUBECONFIG = '/var/lib/jenkins/.kube/kubeconfig'*/
    }

    stages {

        stage('Cleanup') {
            steps {
                deleteDir()
            }
        }

        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/Cedric-Hj/DevOps-CICD-WebApp.git'
            }
        }


        stage('Build and Test') {
            parallel {
                stage('Build') {
                    steps {
                        echo "----------- Build started ----------"
                        sh 'mvn clean deploy -Dmaven.test.skip=true'
                        echo "----------- Build completed ----------"
                    }
                }
                stage('Unit Test') {
                    steps {
                        echo "----------- Unit test started ----------"
                        sh 'mvn surefire-report:report'
                        echo "----------- Unit test completed ----------"
                    }
                }
            }
        }

        /*stage('SonarQube Analysis') {
            environment {
                scannerHome = tool 'sonar-scanner'
            }
            steps {
                echo '<--------------- SonarQube Analysis started  --------------->'
                withSonarQubeEnv('sonar-server') {
                    sh "${scannerHome}/bin/sonar-scanner"
                }
                echo '<--------------- SonarQube Analysis completed  --------------->'
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    def qg = waitForQualityGate()
                    if (qg.status != 'OK') {
                        error "Pipeline aborted due to Quality Gate failure: ${qg.status}"
                        emailext (
                            to: 'devops.cedric.hj@gmail.com',
                            subject: "Build ${env.JOB_NAME} - ${env.BUILD_NUMBER} Quality Gate Failed",
                            body: """
                            The build ${env.JOB_NAME} - ${env.BUILD_NUMBER} has failed the Quality Gate in SonarCloud.

                            Quality Gate Status: ${status}
                            Reason: ${description}

                            Please check the SonarCloud report for more details: ${SONARCLOUD_URL}/dashboard?id=${env.JOB_NAME}
                            """
                        )
                    }
                }
            }
        }*/

        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker image with tag: ${dockerRepo}:${appVersion}"
                    docker.build("${dockerRepo}:${appVersion}")
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('', 'DockerCredencials') {
                        sh "docker push ${dockerRepo}:${appVersion}" 
                    }
                }
            }
        }

        /*stage('Deploy to Kubernetes') {
            steps {
                script {
                    // Apply the Kubernetes manifests
                    sh "kubectl --kubeconfig=$KUBECONFIG apply -f /opt/kubernetes/namespace.yaml"
                    sh "kubectl --kubeconfig=$KUBECONFIG apply -f /opt/kubernetes/deployment.yaml"
                    sh "kubectl --kubeconfig=$KUBECONFIG apply -f /opt/kubernetes/service.yaml"
                }
            }
        }*/

        stage(" Deploy ") {
          steps {
            script {
               echo '<--------------- Helm remove all version and Deploy new one --------------->'
               sh '''
                    helm uninstall <release-name> --namespace ced-devops-cicd
                    kubectl delete namespace ced-devops-cicd
                    helm uninstall ced-devops-webapp --namespace ced-devops-cicd
                    kubectl create namespace ced-devops-cicd
                    kubectl label namespace ced-devops-cicd app.kubernetes.io/managed-by=Helm
                    kubectl annotate namespace ced-devops-cicd meta.helm.sh/release-name=ced-devops-webapp
                    kubectl annotate namespace ced-devops-cicd meta.helm.sh/release-namespace=ced-devops-cicd
                    helm install ced-devops-webapp Ced_Devops_Webapp-0.1.0.tgz --namespace ced-devops-cicd
                '''
               echo '<--------------- Helm deploy Ends --------------->'
            }
          }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully'
        }
        failure {
            echo 'Pipeline failed'
        }
    }
}
