Vagrant.configure("2") do |config|
  # Define the Jenkins VM
  config.vm.define "jenkins" do |jenkins|
    jenkins.vm.box = "ubuntu/jammy-server"
    jenkins.vm.hostname = "jenkins"
    jenkins.vm.network "public_network", bridge: "Intel(R) Ethernet Connection (2)I219-V", ip: "192.168.1.100"
    jenkins.vm.provider "virtualbox" do |vb|
      vb.memory = "4096"
      vb.cpus = 2
    end

    # Provision the Jenkins VM
    jenkins.vm.provision "shell", inline: <<-SHELL
      # Update and upgrade apt packages
      sudo apt-get update
      sudo apt-get upgrade -y

      # Install Java 21
      sudo apt-get install -y openjdk-21-jdk

      # Install Jenkins
      wget -q -O - https://pkg.jenkins.io/debian/jenkins.io.key | sudo apt-key add -
      sudo sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'
      sudo apt-get update
      sudo apt-get install -y jenkins

      # Start Jenkins
      sudo systemctl start jenkins
      sudo systemctl enable jenkins

      # Install Maven
      MAVEN_VERSION=3.9.7
      MAVEN_HOME=/opt/apache-maven-${MAVEN_VERSION}
      MAVEN_BINARY_URL=https://dlcdn.apache.org/maven/maven-3/${MAVEN_VERSION}/binaries/apache-maven-${MAVEN_VERSION}-bin.tar.gz

      # Install dependencies for Maven
      sudo apt-get install -y fontconfig openjdk-21-jre
      wget ${MAVEN_BINARY_URL} -O /tmp/apache-maven-${MAVEN_VERSION}-bin.tar.gz
      sudo tar -xzf /tmp/apache-maven-${MAVEN_VERSION}-bin.tar.gz -C /opt
      sudo ln -s ${MAVEN_HOME}/bin/mvn /usr/bin/mvn

      # Install Docker
      sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release
      curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
      sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
      sudo apt-get update
      sudo apt-get install -y docker-ce
      sudo systemctl start docker
      sudo systemctl enable docker

      # Install kubectl
      curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
      sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

      # Install Helm
      curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      # Install Ansible
      sudo apt-add-repository ppa:ansible/ansible
      sudo apt-get update
      sudo apt-get install -y ansible

      # Set root password
      echo "root:rootroot" | sudo chpasswd
    SHELL
  end

  # Define the second VM (k8s-control)
  config.vm.define "k8s-control" do |k8s_control|
    k8s_control.vm.box = "ubuntu/jammy-server"
    k8s_control.vm.hostname = "k8s-control"
    k8s_control.vm.network "public_network", bridge: "Intel(R) Ethernet Connection (2)I219-V", ip: "192.168.1.101"
    k8s_control.vm.provider "virtualbox" do |vb|
      vb.memory = "4096"
      vb.cpus = 2
    end

    # Provision the k8s-control VM
    k8s_control.vm.provision "shell", inline: <<-SHELL
      # Update and upgrade apt packages
      sudo apt-get update
      sudo apt-get upgrade -y

      # Set root password
      echo "root:rootroot" | sudo chpasswd
    SHELL
  end

  # Define the third VM (k8s-1)
  config.vm.define "k8s-1" do |k8s_1|
    k8s_1.vm.box = "ubuntu/jammy-server"
    k8s_1.vm.hostname = "k8s-1"
    k8s_1.vm.network "public_network", bridge: "Intel(R) Ethernet Connection (2)I219-V", ip: "192.168.1.102"
    k8s_1.vm.provider "virtualbox" do |vb|
      vb.memory = "4096"
      vb.cpus = 2
    end

    # Provision the k8s-1 VM
    k8s_1.vm.provision "shell", inline: <<-SHELL
      # Update and upgrade apt packages
      sudo apt-get update
      sudo apt-get upgrade -y

      # Set root password
      echo "root:rootroot" | sudo chpasswd
    SHELL
  end
end
